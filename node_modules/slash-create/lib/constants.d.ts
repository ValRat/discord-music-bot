/// <reference types="node" />
import { IncomingMessage } from 'http';
import { MessageData } from './structures/message';
export declare const VERSION: string;
export declare const API_VERSION = 8;
export declare const INTERACTION_VERSION = 1;
export declare const API_BASE_URL: string;
export declare const CDN_URL = "https://cdn.discordapp.com";
/** The types of interactions. */
export declare enum InteractionType {
    /** A ping. */
    PING = 1,
    /** A command invocation. */
    COMMAND = 2,
    /** An invocation of a message component. */
    MESSAGE_COMPONENT = 3
}
/** The types of interaction responses. */
export declare enum InteractionResponseType {
    /** Acknowledge a `PING`. */
    PONG = 1,
    /** Respond with a message, showing the user's input. */
    CHANNEL_MESSAGE_WITH_SOURCE = 4,
    /** Create a deferred message with source. */
    DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE = 5,
    /** Acknowledge the interaction, edit the original message later. */
    DEFERRED_UPDATE_MESSAGE = 6,
    /** Edits the message the component was attached to. */
    UPDATE_MESSAGE = 7
}
/** Message flags for interaction responses. */
export declare enum InteractionResponseFlags {
    /** Sends a message back to the invoker, similar to messages by Clyde. */
    EPHEMERAL = 64
}
/**
 * An object mapping the types a command option can use.
 */
export declare enum CommandOptionType {
    /** A sub-command for the application's command */
    SUB_COMMAND = 1,
    /** A group of sub-commands */
    SUB_COMMAND_GROUP = 2,
    /** A string. */
    STRING = 3,
    /** An integer. */
    INTEGER = 4,
    /** A boolean. */
    BOOLEAN = 5,
    /** A user, this would return the user's ID in the interaction. */
    USER = 6,
    /** A channel, this would return the channel's ID in the interaction. */
    CHANNEL = 7,
    /** A role, this would return the role's ID in the interaction. */
    ROLE = 8,
    /** Anything mentionable, returning the ID of the object. */
    MENTIONABLE = 9,
    /** A number, including decimal numbers. */
    NUMBER = 10
}
/** The types of applicaiion commands available. */
export declare enum ApplicationCommandType {
    /** Slash commands; a text-based command that shows up when a user types `/` */
    CHAT_INPUT = 1,
    /** A UI-based command that shows up when you right click or tap on a user */
    USER = 2,
    /** A UI-based command that shows up when you right click or tap on a messages */
    MESSAGE = 3
}
/**
 * An partial application command in Discord.
 * @private
 */
export interface PartialApplicationCommand {
    /** The name of the command. */
    name: string;
    /** The description of the command. */
    description?: string;
    /** The optoins for the command. */
    options?: ApplicationCommandOption[];
    /** Whether to enable this command for everyone by default. */
    default_permission?: boolean;
    /** The type of application this is representing. `1` by default. */
    type?: ApplicationCommandType;
}
/** @hidden */
export interface BulkUpdateCommand extends PartialApplicationCommand {
    /** The command's ID. */
    id?: string;
}
/**
 * An application command in Discord.
 * @private
 */
export interface ApplicationCommand extends PartialApplicationCommand {
    /** The command's ID. */
    id: string;
    /** The application's ID responsible for this command. */
    application_id: string;
    /** The guild ID this comamnd is exlusive to. */
    guild_id?: string;
    /** The version ID of the command. */
    version: string;
}
export interface ApplicationCommandOptionBase {
    /** The type of option this one is. */
    type: CommandOptionType.BOOLEAN | CommandOptionType.USER | CommandOptionType.CHANNEL | CommandOptionType.ROLE | CommandOptionType.MENTIONABLE;
    /** The name of the option. */
    name: string;
    /** The description of the option. */
    description: string;
    /** Whether the parameter is required. */
    required?: boolean;
}
/**
 * @private
 */
export interface ApplicationCommandOptionSubCommand extends Omit<ApplicationCommandOptionBase, 'type'> {
    /** The type of option this one is. */
    type: CommandOptionType.SUB_COMMAND | CommandOptionType.SUB_COMMAND_GROUP;
    /** The sub-options for the option. This can only be used for sub-commands and sub-command groups. */
    options?: ApplicationCommandOption[];
}
/**
 * @private
 */
export interface ApplicationCommandOptionArgument extends Omit<ApplicationCommandOptionBase, 'type'> {
    /** The type of option this one is. */
    type: CommandOptionType.STRING | CommandOptionType.INTEGER | CommandOptionType.NUMBER;
    /** The choices of the option. If set, these are the only values a user can pick from. */
    choices?: ApplicationCommandOptionChoice[];
}
/** An option in an application command. */
export declare type ApplicationCommandOption = ApplicationCommandOptionBase | ApplicationCommandOptionSubCommand | ApplicationCommandOptionArgument;
/** A choice for a user to pick from. */
export interface ApplicationCommandOptionChoice {
    /** The name of the choice. */
    name: string;
    /** The value of the choice. */
    value: string | number;
}
/** The type of thing to apply the permission to. */
export declare enum ApplicationCommandPermissionType {
    /** A Discord role. */
    ROLE = 1,
    /** A Discord user. */
    USER = 2
}
/** A permission in a command. */
export interface ApplicationCommandPermissions {
    id: string;
    type: ApplicationCommandPermissionType;
    permission: boolean;
}
/** @private */
export interface PartialApplicationCommandPermissions {
    id: string;
    permissions: ApplicationCommandPermissions[];
}
/** @private */
export interface GuildApplicationCommandPermissions extends PartialApplicationCommandPermissions {
    application_id: string;
    guild_id: string;
}
/** @private */
export interface RawRequest {
    method: string;
    url: string;
    auth: boolean;
    body: any;
    route: string;
    short: boolean;
    resp: IncomingMessage;
}
/** Any interaction request from Discord. */
export declare type AnyRequestData = PingRequestData | InteractionRequestData | MessageComponentRequestData;
/** @private */
export interface RequestData {
    version: 1;
    type: InteractionType;
    token: string;
    id: string;
}
/**
 * A ping interaction.
 * @private
 */
export interface PingRequestData {
    version: 1;
    type: InteractionType.PING;
    user?: CommandUser;
    token: string;
    id: string;
}
/**
 * A command interaction within a direct message.
 * @private
 */
export interface DMInteractionRequestData {
    version: 1;
    type: InteractionType.COMMAND;
    token: string;
    id: string;
    channel_id: string;
    user: CommandUser;
    data: CommandData;
}
/**
 * A command interaction within a guild.
 * @private
 */
export interface GuildInteractionRequestData {
    version: 1;
    type: InteractionType.COMMAND;
    token: string;
    id: string;
    channel_id: string;
    guild_id: string;
    member: CommandMember;
    data: CommandData;
}
/**
 * Any command interaction.
 * @private
 */
export declare type InteractionRequestData = DMInteractionRequestData | GuildInteractionRequestData;
/** The partial message from a message component interaction. */
export interface PartialMessage {
    /** The ID of the message. */
    id: string;
    /** The message flags. */
    flags: number;
}
/** The partial emoji from a message component. */
export interface PartialEmoji {
    /** The ID of the emoji, if it is custom. */
    id?: string;
    /** The name of the emoji, or the raw emoji if not custom. */
    name?: string;
    /** Whether this emoji is animated. */
    animated?: boolean;
}
/**
 * A message component interaction within a direct message.
 * @private
 */
export interface DMMessageComponentRequestData {
    version: 1;
    type: InteractionType.MESSAGE_COMPONENT;
    token: string;
    message: MessageData;
    id: string;
    channel_id: string;
    user: CommandUser;
    data: {
        custom_id: string;
        component_type: ComponentType;
        values?: string[];
    };
}
/**
 * A message component interaction within a guild.
 * @private
 */
export interface GuildMessageComponentRequestData {
    version: 1;
    type: InteractionType.MESSAGE_COMPONENT;
    token: string;
    message: MessageData;
    id: string;
    channel_id: string;
    guild_id: string;
    member: CommandMember;
    data: {
        custom_id: string;
        component_type: ComponentType;
        values?: string[];
    };
}
/**
 * Any message component interaction.
 * @private
 */
export declare type MessageComponentRequestData = DMMessageComponentRequestData | GuildMessageComponentRequestData;
/** @private */
export interface ResolvedMemberData {
    roles: string[];
    premium_since: string | null;
    pending: boolean;
    is_pending: boolean;
    nick: string | null;
    joined_at: string;
}
/** @private */
export interface CommandMember extends ResolvedMemberData {
    user: CommandUser;
    mute: boolean;
    deaf: boolean;
    permissions: string;
}
/** @private */
export interface CommandUser {
    id: string;
    username: string;
    avatar: string | null;
    discriminator: string;
    public_flags: number;
}
/** @private */
export interface ResolvedRole {
    color: number;
    hoist: boolean;
    id: string;
    managed: boolean;
    mentionable: boolean;
    name: string;
    permissions: string;
    position: number;
}
/** @private */
export interface ResolvedChannel {
    id: string;
    name: string;
    permissions: string;
    type: number;
}
/** @hidden */
export interface UserObject extends CommandUser {
    /** Whether this user is a bot. */
    bot?: boolean;
}
/** @private */
export interface CommandData {
    id: string;
    name: string;
    options?: AnyCommandOption[];
    resolved?: {
        users?: {
            [id: string]: CommandUser;
        };
        members?: {
            [id: string]: ResolvedMemberData;
        };
        roles?: {
            [id: string]: ResolvedRole;
        };
        channels?: {
            [id: string]: ResolvedChannel;
        };
        messages?: {
            [id: string]: MessageData;
        };
    };
    type: ApplicationCommandType;
    target_id?: string;
}
/** @private */
export declare type AnyCommandOption = CommandStringOption | CommandIntegerOption | CommandBooleanOption | CommandSubcommandOption;
/** @private */
export interface CommandStringOption {
    /** The name for the option. */
    name: string;
    type?: CommandOptionType.STRING | CommandOptionType.USER | CommandOptionType.CHANNEL | CommandOptionType.ROLE;
    value: string;
}
/** @private */
export interface CommandIntegerOption {
    /** The name for the option. */
    name: string;
    type?: CommandOptionType.INTEGER;
    value: number;
}
/** @private */
export interface CommandBooleanOption {
    /** The name for the option. */
    name: string;
    type?: CommandOptionType.BOOLEAN;
    value: boolean;
}
/** @private */
export interface CommandSubcommandOption {
    /** The name for the option. */
    name: string;
    type?: CommandOptionType.SUB_COMMAND | CommandOptionType.SUB_COMMAND_GROUP;
    options?: AnyCommandOption[];
}
/** The types of components available. */
export declare enum ComponentType {
    /** A row of components. */
    ACTION_ROW = 1,
    /** A button component. */
    BUTTON = 2,
    /** A select component. */
    SELECT = 3
}
/** The types of component button styles. */
export declare enum ButtonStyle {
    /** A primary-colored button. */
    PRIMARY = 1,
    /** A gray, secondary button. */
    SECONDARY = 2,
    /** A green button. */
    SUCCESS = 3,
    /** A red button. */
    DESTRUCTIVE = 4,
    /** A gray button with a link icon. */
    LINK = 5
}
/** Any component. */
export declare type AnyComponent = ComponentActionRow | AnyComponentButton | ComponentSelectMenu;
/** A row of components. */
export interface ComponentActionRow {
    /** The type of component to use. */
    type: ComponentType.ACTION_ROW;
    /** The components to show inside this row. */
    components: (AnyComponentButton | ComponentSelectMenu)[];
}
/** Any component button. */
export declare type AnyComponentButton = ComponentButton | ComponentButtonLink;
/** A regular component button. */
export interface ComponentButton {
    /** The type of component to use. */
    type: ComponentType.BUTTON;
    /** The style of button to show. */
    style: ButtonStyle.PRIMARY | ButtonStyle.SECONDARY | ButtonStyle.SUCCESS | ButtonStyle.DESTRUCTIVE;
    /** The identifier for this button. */
    custom_id: string;
    /** The label of the button. */
    label: string;
    /** The emoji to show inside the button. */
    emoji?: PartialEmoji;
    /** Whether this button will show as disabled. */
    disabled?: boolean;
}
/** A component button with a link. */
export interface ComponentButtonLink extends Omit<ComponentButton, 'custom_id' | 'style'> {
    /** The style of button to show. */
    style: ButtonStyle.LINK;
    /** The URL for link buttons. */
    url: string;
}
export interface ComponentSelectMenu {
    /** The type of component to use. */
    type: ComponentType.SELECT;
    /** The identifier of the of the menu. */
    custom_id: string;
    /** The options to show inside this menu. */
    options: ComponentSelectOption[];
    /** The string to show in absence of a selected option. */
    placeholder?: string;
    /** The minimum number of items to be chosen. */
    min_values?: number;
    /** The maximum number of items to be chosen. */
    max_values?: number;
}
export interface ComponentSelectOption {
    /** The description of this option. */
    description?: string;
    /** The emoji to show with the option. */
    emoji?: PartialEmoji;
    /** The label of this option. */
    label: string;
    /** The value of this option. */
    value: string;
    /** Should this render by default */
    default?: boolean;
}
/** @see https://www.npmjs.com/package/require-all#usage */
export interface RequireAllOptions {
    dirname: string;
    filter?: ((name: string, path: string) => string | false | undefined) | RegExp;
    excludeDirs?: RegExp;
    map?: (name: string, path: string) => string;
    resolve?: (module: any) => any;
    recursive?: true | false;
}
/** Any image format supported by Discord. */
export declare type ImageFormat = 'jpg' | 'jpeg' | 'png' | 'webp' | 'gif';
export declare const ImageFormats: string[];
export declare const ImageSizeBoundaries: {
    MINIMUM: number;
    MAXIMUM: number;
};
export declare const PermissionNames: {
    [perm: string]: string;
};
export declare const Endpoints: {
    COMMANDS: (applicationID: string) => string;
    GUILD_COMMANDS: (applicationID: string, guildID: string) => string;
    COMMAND: (applicationID: string, commandID: string) => string;
    GUILD_COMMAND: (applicationID: string, guildID: string, commandID: string) => string;
    GUILD_COMMAND_PERMISSIONS: (applicationID: string, guildID: string) => string;
    COMMAND_PERMISSIONS: (applicationID: string, guildID: string, commandID: string) => string;
    INTERACTION_CALLBACK: (interactionID: string, interactionToken: string) => string;
    MESSAGE: (applicationID: string, interactionToken: string, messageID?: string) => string;
    FOLLOWUP_MESSAGE: (applicationID: string, interactionToken: string) => string;
    DEFAULT_USER_AVATAR: (userDiscriminator: string | number) => string;
    USER_AVATAR: (userID: string, userAvatar: string) => string;
};
